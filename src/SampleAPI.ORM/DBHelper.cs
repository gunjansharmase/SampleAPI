using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Reflection;
using SampleAPI.ORM.Attribute;

namespace SampleAPI.ORM
{
    public class DbHelper : IDbHelper
    {
        protected const string ParameterPrefix = "@";
        protected const string DefaultPrimaryKey = "Id";

        public string ConstructColumsForInsert<T>()
        {
            return ConstructColumsForInsert<T>(null);
        }

        public string ConstructColumsForInsert<T>(string[] ignoreColumns)
        {
            var insertProperties = GetParameterizableProperties<T>();

            if (ignoreColumns != null)
                return string.Join(",", insertProperties.Where(c => !ignoreColumns.Contains(c.Name)).Select(c => c.Name));

            return string.Join(",", insertProperties.Select(c => c.Name));
        }

        public string ConstructParamsForInsert<T>()
        {
            return ConstructParamsForInsert<T>(null);
        }

        public string ConstructParamsForInsert<T>(string[] ignoreColumns)
        {
            var insertProperties = GetParameterizableProperties<T>();

            if (ignoreColumns != null)
                return string.Join(",", insertProperties.Where(c => !ignoreColumns.Contains(c.Name)).Select(c => $"{ParameterPrefix + c.Name}"));

            return string.Join(",", insertProperties.Select(c => $"{ParameterPrefix + c.Name}"));
        }

        public string ConstructColumsForUpdate<T>(string[] ignoreColumns)
        {
            var updateProperties = GetParameterizableProperties<T>();
            if (ignoreColumns != null)
                return string.Join(",", updateProperties.Where(c => !ignoreColumns.Contains(c.Name)).Select(c => $"{c.Name}=COALESCE({ParameterPrefix + c.Name},{c.Name})"));

            return string.Join(",", updateProperties.Select(c => $"{c.Name}=COALESCE({ParameterPrefix + c.Name},{c.Name})"));
        }

        public string ConstructColumsForUpdateWithKeys<T>(string[] columns)
        {
            return string.Join(" AND ", columns.Select(c => $"{c}={ParameterPrefix + c}"));
        }

        public IDictionary<string, Tuple<Type,bool>> GetAllForeignKeys<T>()
        {
            var dictonaryResult = new Dictionary<string, Tuple<Type, bool>>();
            var table = typeof(T);
            var attributes = table.GetProperties().AsEnumerable().Where(c => c.GetCustomAttribute<ForeignKeyAttributeEx>() != null).SelectMany(c => c.GetCustomAttributes());

            if (!attributes.Any())
                return dictonaryResult;

            foreach (var attribute in attributes.OfType<ForeignKeyAttributeEx>())
            {
                if (!dictonaryResult.ContainsKey(attribute.Name))
                    dictonaryResult.Add(attribute.Name, Tuple.Create(attribute.ReferenceType,attribute.IsNullable));
            }

            return dictonaryResult;
        }

        public Object GetKeyValue<T>(T entity,string keyName)
        {
            var attribute = entity.GetType().GetProperties().FirstOrDefault(property => property.Name.Equals(keyName));
            if (attribute == null)
                return null;

            return attribute.GetValue(entity, null);
        }

       

        public IDictionary<string, Type> ForeignKey<T>(string keyName)
        {
            var dictonaryResult = new Dictionary<string, Type>();
            var table = typeof(T);
            var attributes = table.GetProperties().AsEnumerable().Where(c => c.GetCustomAttribute<ForeignKeyAttributeEx>() != null).SelectMany(c => c.GetCustomAttributes());

            if (!attributes.Any())
                return dictonaryResult;

            foreach (var attribute in attributes.OfType<ForeignKeyAttributeEx>())
            {
                if (!dictonaryResult.ContainsKey(attribute.Name))
                    dictonaryResult.Add(attribute.Name, attribute.ReferenceType);
            }

            return dictonaryResult;
        }


        public string GetPrimaryKeyAutoGenerated<T>()
        {
            return GetPrimaryKeyAutoGenerated(typeof(T));                
        }

        public string GetPrimaryKeyAutoGenerated(Type T)
        {
            foreach (var key in UniqueKeys(T))
            {
                var value = T.GetProperty(key.Name).GetCustomAttribute<DatabaseGeneratedAttribute>();
                if (value.DatabaseGeneratedOption == DatabaseGeneratedOption.Identity)
                {
                    return key.Name;
                }
            }

            return DefaultPrimaryKey;
        }         

        private IEnumerable<PropertyInfo> GetParameterizableProperties<T>()
        {
            var allProperties = typeof(T).GetProperties(BindingFlags.Public | BindingFlags.Instance).OrderBy(p => p.MetadataToken);
            return allProperties.Where(pi => pi.PropertyType.GetTypeInfo().IsValueType || pi.PropertyType == typeof(string) || pi.PropertyType == typeof(DateTime)).ToArray();
        }

        private static IEnumerable<PropertyInfo> UniqueKeys(Type table)
        {
            return table.GetProperties().AsEnumerable().Where(c => c.GetCustomAttribute<KeyAttribute>() != null || c.GetCustomAttribute<ForeignKeyAttributeEx>() != null);
        }

       
    }
}
