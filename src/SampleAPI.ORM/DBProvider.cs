using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Linq;
using System.Threading.Tasks;
using SampleAPI.DataTransferObjects;

namespace SampleAPI.ORM
{
    public class DbProvider : IDbProvider
    {
        protected bool disposedValue = false;
        protected IDbTransaction _openTransaction;
        protected IDbConnection _dbconnection;
        protected readonly IDapperWrapper _dapper;
        protected readonly IDbHelper _dbHelper;
        public DbProvider(IDbConnection dbconnection, IDapperWrapper dapper, IDbHelper dbHelper)
        {
            _dbconnection = dbconnection;
            _dapper = dapper;
            _dbHelper = dbHelper;
        }

        public virtual Task<int> AddAsync<T>(T entity, string schema)
        {
            return AddAsync<T>(entity, schema, null);
        }

        public virtual async Task<int> AddAsync<T>(T entity, string schema, string[] ignoreParameters)
        {
            var query = $"INSERT INTO {schema + typeof(T).Name} ({_dbHelper.ConstructColumsForInsert<T>(ignoreParameters)}) VALUES ({_dbHelper.ConstructParamsForInsert<T>(ignoreParameters)});SELECT SCOPE_IDENTITY();";
            var result = await _dapper.QueryAsync<int>(_dbconnection, query, entity, _openTransaction);

            return result.Single();
        }

        public virtual Task<int> AddRangeAsync<T>(IEnumerable<T> entity, string schema)
        {
            return AddRangeAsync<T>(entity, schema, null);
        }

        public virtual async Task<int> AddRangeAsync<T>(IEnumerable<T> entities, string schema, string[] ignoreParameters = null)
        {
            var query = $"INSERT INTO {schema + typeof(T).Name} ({_dbHelper.ConstructColumsForInsert<T>(ignoreParameters)}) VALUES ({_dbHelper.ConstructParamsForInsert<T>(ignoreParameters)});";
            return await _dapper.ExecuteAsync(_dbconnection, query, entities, _openTransaction);
        }

        public virtual async Task<int> AddRangeWithQueryAsync<T>(string query, IEnumerable<T> entities, string[] ignoreParameters = null)
        {
            return await _dapper.ExecuteAsync(_dbconnection, query, entities, _openTransaction);
        }

        public async Task<IEnumerable<T>> GetAsync<T>(string schema, bool enabled = true)
        {
            return await GetAsync<T>($"select * from {schema + typeof(T).Name} ", null);
        }

        public async Task<T> GetByIdAsync<T>(string id, string keyName, string schema, bool enabled = true)
        {
            var result = await GetAsync<T>($"select * from {schema + typeof(T).Name} WHERE {keyName}=@Id ", new { Id = id });
            return result.SingleOrDefault();
        }

        public async Task<IEnumerable<T>> GetAsync<T>(string query, object param = null)
        {
            return await _dapper.QueryAsync<T>(_dbconnection, query, param);
        }

        public void CloseConnection()
        {
            if (_dbconnection.State != ConnectionState.Closed)
            {
                _dbconnection.Close();
            }
        }

        public void OpenConnection()
        {
            if (null == _dbconnection || _dbconnection.State == ConnectionState.Closed)
            {
                ((DbConnection)_dbconnection).Open();
            }
        }
        public IDbTransaction InitTransaction(IsolationLevel isolationLevel)
        {
            if (null == _openTransaction)
            {
                OpenConnection();
                _openTransaction = ((SqlConnection)_dbconnection).BeginTransaction(isolationLevel);
            }
            return _openTransaction;
        }

        public void CommitTransaction()
        {
            if (null != _openTransaction)
            {
                _openTransaction.Commit();
                _openTransaction.Dispose();
                _openTransaction = null;
            }
        }

        //https://stackoverflow.com/questions/31152954/is-it-possible-to-commit-rollback-sqltransaction-in-asynchronous

        public void RollbackTransaction()
        {
            if (null != _openTransaction)
            {
                _openTransaction.Rollback();
                _openTransaction.Dispose();
                _openTransaction = null;
            }
        }

        public virtual async Task<int> DeleteAsync<T>(int entityId, string schema, string[] ignoreParameters = null)
        {
            var query = $"UPDATE {schema + typeof(T).Name} SET IsDeleted=1,DateUpdated=@ModifiedOn Where {_dbHelper.GetPrimaryKeyAutoGenerated<T>()} = @Id ;";
            var count = await _dapper.ExecuteAsync(_dbconnection, query, new { Id = entityId, ModifiedOn = DateTime.UtcNow }, _openTransaction);
            return count;
        }


        public virtual async Task<int> UpdateAsync<T>(T entity, string schema, string[] ignoreParameters = null)
        {
            var query = $"UPDATE {schema + typeof(T).Name} SET {_dbHelper.ConstructColumsForUpdate<T>(ignoreParameters)} Where {_dbHelper.GetPrimaryKeyAutoGenerated<T>()}=@{_dbHelper.GetPrimaryKeyAutoGenerated<T>()} ;";
            var count = await _dapper.ExecuteAsync(_dbconnection, query, entity, _openTransaction);
            return count;
        }

        public virtual async Task<int> UpdateRangeAsync<T>(IEnumerable<T> entities, string[] ByIds, string schema, string[] ignoreParameters = null)
        {
            var query = $"UPDATE {schema + typeof(T).Name} SET {_dbHelper.ConstructColumsForUpdate<T>(ignoreParameters)} Where {_dbHelper.ConstructColumsForUpdateWithKeys<T>(ByIds)};";
            var count = await _dapper.ExecuteAsync(_dbconnection, query, entities, _openTransaction);
            return count;
        }

        public virtual async Task<IDictionary<Type, IEnumerable<object>>> QueryMultiple(string query, object parameters, IEnumerable<Type> returnTypes)
        {
            var results = new Dictionary<Type, IEnumerable<object>>();
            using (var multiResult = await _dapper.QueryMultipleAsync(_dbconnection, query, parameters, _openTransaction))
            {
                if (multiResult == null)
                    return results;

                foreach (Type returnType in returnTypes)
                {
                    var returnValues = await multiResult.ReadAsync(returnType).ConfigureAwait(false);
                    if (returnValues.Any())
                        results.Add(returnType, returnValues);
                    else
                        results.Add(returnType, null);
                }
            }
            return results;
        }

        public virtual async Task<IDictionary<Type, IEnumerable<object>>> QueryMultiple(string sp, object args, CommandType type, IEnumerable<Type> returnTypes)
        {
            var results = new Dictionary<Type, IEnumerable<object>>();
            using (var grid = await _dapper.QueryMultipleAsync(_dbconnection, sql: sp, param: args, transaction: _openTransaction, commandType: type))
            {
                if (grid != null)
                {
                    foreach (Type returnType in returnTypes)
                    {
                        var returnValues = await grid.ReadAsync(returnType).ConfigureAwait(false);
                        if (returnValues.Any())
                        {
                            results.Add(returnType, returnValues);
                        }
                    }
                }
            }
            return results;
        }

        public async Task<IEnumerable<T>> GetByQuery<Q, S, T>(string query, Func<Q, S, T> map, object param = null, string splitOn = "Id")
        {
            return await _dapper.Query<Q, S, T>(_dbconnection, map, query, param, _openTransaction, true, null, null, splitOn).ConfigureAwait(false);
        }

        public async Task<IEnumerable<T>> GetByQuery<Q, R, S, T>(string query, Func<Q, R, S, T> map, object param = null, string splitOn = "Id")
        {
            return await _dapper.Query<Q, R, S, T>(_dbconnection, map, query, param, _openTransaction, true, null, null, splitOn).ConfigureAwait(false);
        }

        public IEnumerable<T> Query<T>(string sql, object param = null)
        {
            return _dapper.Query<T>(_dbconnection, sql, param, _openTransaction, true, null, null);
        }

        public dynamic ExecuteQueryMultiple(string spName, object param = null, IEnumerable<MapItem> mapItems = null, CommandType commandType = CommandType.StoredProcedure)
        {
            return _dapper.ExecuteQueryMultiple(_dbconnection, spName, param, mapItems, commandType);
        }


        protected virtual void Dispose(bool disposing)
        {
            if (!disposedValue)
            {
                if (disposing)
                {
                    if (_openTransaction != null)
                    {
                        _openTransaction.Rollback();
                        _openTransaction.Dispose();
                    }
                    if (_dbconnection.State != ConnectionState.Closed)
                    {
                        _dbconnection.Close();
                    }

                    _dbconnection.Dispose();
                    _dbconnection = null;
                    _openTransaction = null;
                }

                disposedValue = true;
            }
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }


    }
}
